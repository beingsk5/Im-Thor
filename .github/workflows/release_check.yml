name: GitHub Releases Poller

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  check_releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install deps
        run: pip install requests

      - name: Poll for releases and notify channel
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TELEGRAM_CHANNEL: '@your_channel_username'
        run: |
          python <<EOF
import json, os, requests

TRACKED_FILE = 'data/tracked.json'
NOTIFIED_FILE = 'data/notified.json'
BADGE_FILE = 'badge/tracked-count.json'
BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
CHANNEL = os.environ['TELEGRAM_CHANNEL']

def send_telegram(text, btn_url=None):
    json_body = {
        "chat_id": CHANNEL,
        "text": text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": False
    }
    if btn_url:
        json_body["reply_markup"] = {"inline_keyboard": [[{"text":"⬇️ View release","url": btn_url}]]}
    requests.post(
        f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
        json=json_body
    )

def main():
    if not os.path.exists(TRACKED_FILE):
        print("No tracked.json!")
        return
    tracked = json.load(open(TRACKED_FILE))
    notified = json.load(open(NOTIFIED_FILE)) if os.path.exists(NOTIFIED_FILE) else {}
    count = 0
    for repo in tracked["repos"]:
        url = f"https://api.github.com/repos/{repo}/releases"
        r = requests.get(url)
        if not r.ok: continue
        releases = r.json()
        if not releases: continue
        latest = releases[0]
        if str(latest["id"]) != str(notified.get(repo, "")):
            text = f"🆕 *{repo}* released [{latest['tag_name']}]({latest['html_url']})\n{latest.get('name','')[:40]}"
            send_telegram(text, btn_url=latest["html_url"])
            notified[repo] = str(latest["id"])
        count += 1
    with open(NOTIFIED_FILE, "w") as f:
        json.dump(notified, f, indent=2)
    # badge update
    os.makedirs("badge", exist_ok=True)
    with open(BADGE_FILE, "w") as f:
        json.dump({
            "schemaVersion": 1,
            "label": "tracked repos",
            "message": str(len(tracked["repos"])),
            "color": "brightgreen"
        }, f)

main()
EOF

      - name: Commit & Push updates
        run: |
          git config user.name "GitHubActions"
          git config user.email "actions@github.com"
          git add data/notified.json badge/tracked-count.json
          git commit -m "Update notified releases and badge" || echo "Nothing to commit"
          git push
